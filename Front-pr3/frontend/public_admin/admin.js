// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
async function load_products() {
    const res = await fetch("/api/products");
    const products = await res.json();
    const table = document.getElementById("productsTable");

    table.innerHTML = products.map(p => `
        <tr class="border-b border-gray-200 hover:bg-gray-50">
            <td class="p-4">${p.name}</td>
            <td class="p-4">${p.price} ‚ÇΩ</td>
            <td class="p-4 hidden md:table-cell">${p.categories.join(", ")}</td>
            <td class="p-4 text-center">
                <button onclick="editProduct(${p.id})" class="bg-purple-600 hover:bg-purple-700 text-white p-2 rounded-lg mr-2 transition duration-200">‚úèÔ∏è</button>
                <button onclick="delete_products(${p.id})" class="bg-red-600 hover:bg-red-700 text-white p-2 rounded-lg transition duration-200">üóë</button>
            </td>
        </tr>
    `).join("");
}
// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
async function delete_products(id) {
    await fetch(`/api/products/${id}`, {method: "DELETE"});
    load_products();
}

document.getElementById("productForm").addEventListener("submit",async (e) => {
    e.preventDefault();
    const name = document.getElementById("name").value;
    const price = parseFloat(document.getElementById("price").value);
    const description = document.getElementById("description").value;
    const categories = document.getElementById("categories").value.split(",").map(cat => cat.trim());

    await fetch("/api/products", {
        method: "POST",
        headers: {"Content-Type": "application/json"},
        body: JSON.stringify([{name, price,description,categories}])
    });

    e.target.reset();
    load_products();
});

// –†–∞–±–æ—Ç–∞ —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
async function editProduct(id) {
    const res = await fetch("/api/products");
    const products = await res.json();
    const product = products.find(p => p.id === id);
   
    document.getElementById("editId").value = product.id;
    document.getElementById("editName").value = product.name;
    document.getElementById("editPrice").value = product.price;
    document.getElementById("editDescription").value = product.description;
    document.getElementById("editCategories").value = product.categories.join(", ");

    document.getElementById("editModal").classList.remove("hidden");
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
document.getElementById("closeModal").addEventListener("click", () => {
    document.getElementById("editModal").classList.add("hidden");
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
document.getElementById("saveEdit").addEventListener("click", async () => {
    const id = document.getElementById("editId").value;
    const name = document.getElementById("editName").value;
    const price = parseFloat(document.getElementById("editPrice").value);
    const description = document.getElementById("editDescription").value;
    const categories = document.getElementById("editCategories").value.split(",").map(cat => cat.trim());

    await fetch(`/api/products/${id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name, price, description, categories })
    });

    document.getElementById("editModal").classList.add("hidden");
    load_products();
});

load_products();

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket-—Å–µ—Ä–≤–µ—Ä—É
const socket = new WebSocket('ws://localhost:8080');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏–∑ localStorage (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è), –∏–Ω–∞—á–µ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
let chatHistory = JSON.parse(localStorage.getItem('chatHistory')) || [];


socket.onopen = () => {
    console.log('–ê–¥–º–∏–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É');
};

socket.onmessage = (event) => {
    try {
        const data = JSON.parse(event.data);
        displayMessage(data.text);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
};

socket.onclose = () => {
    console.log('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
};

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "–ê–¥–º–∏–Ω: "
function sendMessage() {
    const input = document.getElementById('chatInput');
    const message = input.value.trim();
    if (message) {
        // –°—Ä–∞–∑—É –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        displayMessage("–ê–¥–º–∏–Ω: " + message);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        socket.send(JSON.stringify({ text: "–ê–¥–º–∏–Ω: " + message }));
        input.value = '';
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
function displayMessage(message) {
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    chatHistory.push(message);
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –≤ localStorage
    localStorage.setItem('chatHistory', JSON.stringify(chatHistory));
    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —á–∞—Ç
    renderChatHistory();
}


function renderChatHistory() {
    const chatContainer = document.getElementById('chatContainer');
    chatContainer.innerHTML = chatHistory.map(msg => `<p>${msg}</p>`).join('');
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–Ω–∏–∑, —á—Ç–æ–±—ã –±—ã–ª –≤–∏–¥–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–µ
    chatContainer.scrollTop = chatContainer.scrollHeight;
}

// –í—ã–∑—ã–≤–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
renderChatHistory();
